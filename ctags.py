"""
    SCons tool for `ctags` command.

    The TagsFile() builder assumes the `ctags` command from exuberant-ctags or universal-ctags packages:
        http://ctags.sourceforge.net/
        https://ctags.io/

    Ex. ctags installation for Ubuntu: `apt install exuberant-ctags`

    Syntax:
        TagsFile('tagfile', [ target, ... ])
        TagsFile([ target, ... ])
        TagsFile([ target, ... sources, ... ])

    If omitted, the output tags file name is given in $CTAGSFILE, default '#tags'

    The dependencies are usually other targets from your build script. Source dependencies of such targets will
    be traversed and added to the list of input files for `ctags` command.

    Each source suffix will be checked against the suffix list in env['CTAGSSUFFXIES'], and only the matching
    files are processed. You can disable the check by using the string '*' as the first list entry.

    To guarantee all tags are visible to the `ctags` command, and listed in the resulting tags file, the
    `ctags` tool should be used together with `gcc-dep`, to have full dependecy information (nested include
    files) generated by gcc / g++ compiler. Otherwise only the source dependencies visible to the SCons internal
    C/C++ scanner will be available to `ctags` command.
"""

import sys
import os
import subprocess
import SCons.Script
import source_browse_base as base

""" default name for `ctags` executable command """
ctags_bin = 'ctags'

def collect_source_dependencies(target, source, env):
    """ emitter function for TagsFile() builder, for listing sources of any target node included in the tags file """

    ext = os.path.splitext(str(env.File(target[0]).path)) if len(target) else ''

    if ext[1] == '.4f9807f6-fcb3-47ff-ac8e-e3a0e2e2c478':
        if len(source) and ext[0] == os.path.splitext(str(env.File(source[0]).path))[0]:
            target = [ ]
        else:
            target[0] = ext[0]  # remove automatically added extension

    if not len(target):
        target.append(env['CTAGSFILE'])

    if 'CTAGSCONFIG' in env:
        for tgt in target:
            for config in env.Split(env['CTAGSCONFIG']):
                if os.path.exists(config):
                    env.Depends(tgt, config)

    return base.collect_source_dependencies(target, source, env, 'CTAGSSUFFIXES')

def run_ctags(target, source, env):
    """ action function invoked by the TagsFile() Builder to run `ctags` command """

    command = \
       env.Split(env['CTAGS']) + env.Split(env['CTAGSFLAGS']) + env.Split(env['CTAGSSTDINFLAGS']) + env.Split(env['CTAGSOUTPUTFLAG']) + [ str(target[0]) ]

    for definition in env.Split(env['CTAGSDEF']):
        command += env.Split(env['CTAGSDEFPREFIX']) + [ definition ]

    print(str(command))
    print(" ".join(base.shell_escape(command)))

    ctags_process = subprocess.Popen(command, stdin = subprocess.PIPE, env = env['ENV'])

    # source.sort()
    for file in source:
        # print("Generating tags for source file " + str(file))
        ctags_process.stdin.write(str(file) + "\n")

    ctags_process.stdin.close()

    if ctags_process.wait():
        sys.stderr.write("ctags command exited with code: " + str(ctags_process.returncode) + '\n')
        return ctags_process.returncode

def exists(env):
    """ Check if `ctags` command is present """
    return env['CTAGS'] if 'CTAGS' in env else None

def show_tags_generation_message(target, source, env):
    pass

def generate(env, **kw):
    """
        Populate environment with variables for the TagsFile() builder:
            $CTAGS, $CTAGSFILE, $CTAGSFLAGS, $CTAGSDEF, $CTAGSDEFPREFIX,
            $CTAGSCONFIG, $CTAGSSUFFIXES, $CTAGSSTDINFLAGS, $CTAGSOUTPUTFLAG

        Attach the TagsFile() builder to the environment.
    """

    env.SetDefault\
        (
            CTAGS           = ctags_bin,
            CTAGSFLAGS      =
                [
                    '-h', '+.tcc.',
                    '--c-kinds=+px',
                    '--c++-kinds=+px',
                    '--extra=+q',
                    '--langmap=c++:+.tcc.',
                    '--fields=+iaSt',
                    '--totals=yes'
                ],
            CTAGSDEFPREFIX  = '-I',
            CTAGSSTDINFLAGS = [ '-L', '-' ],
            CTAGSOUTPUTFLAG = [ '-o' ],
            CTAGSDEF        =
                [
                    '_GLIBCXX_NOEXCEPT',
                    '_GLIBCXX_VISIBILITY+',
                    '_GLIBCXX_VISIBILITY(x)'
                ],
            CTAGSFILE       = '#tags',
            CTAGSCONFIG     = [ '/etc/ctags.conf', '/usr/local/etc/ctags.conf', os.path.join(os.environ['HOME'], '.ctags'), '#.ctags' ],
            CTAGSSUFFIXES   =
                [
                    '',
                    '.build.xml',
                    '.asm', '.ASM', '.s', '.S', '.A51', '.29k', '.29K', # *.[68][68][kKsSxX] *.[xX][68][68]
                    '.asp', '.asa',
                    '.awk', '.gawk', '.mawk',
                    '.bas', '.bi', '.bb', '.pb',
                    '.bet',
                    '.c',
                    '.c++', '.cc', '.cp', '.cpp', '.cxx',
                    '.h', '.h++', '.hh', '.hp', '.hpp', '.hxx', '.C', '.H', '.tcc',
                    '.cs',
                    '.cbl', '.cob', '.CBL', '.COB',
                    '.bat', '.cmd',
                    '.e',
                    '.erl', '.ERL', '.hrl', '.HRL',
                    '.as', '.mxml',
                    '.f', '.for', '.ftn', '.f77', '.f90', '.f95', '.F', '.FOR', '.FTN', '.F77', '.F90', '.F95',
                    '.go',
                    '.htm', '.html',
                    '.java',
                    '.js',
                    '.cl', '.clisp', '.el', '.l', '.lisp', '.lsp',
                    '.lua',
                    '.mak', '.mk', # [Mm]akefile GNUmakefile',
                    '.m',
                    '.m', '.h',
                    '.ml', '.mli',
                    '.p', '.pas',
                    '.pl', '.pm', '.plx', '.perl',
                    '.php', '.php3', '.phtml',
                    '.py', '.pyx', '.pxd', '.pxi', '.scons',
                    '.cmd', '.rexx', '.rx',
                    '.rb', '.ruby',
                    '.SCM', '.SM', '.sch', '.scheme', '.scm', '.sm',
                    '.sh', '.SH', '.bsh', '.bash', '.ksh', '.zsh',
                    '.sl',
                    '.sml', '.sig',
                    '.sql',
                    '.tcl', '.tk', '.wish', '.itcl',
                    '.tex',
                    '.vr', '.vri', '.vrh',
                    '.v',
                    '.vhdl', '.vhd',
                    '.vim',
                    '.y'
                ]
        )

    env['BUILDERS']['TagsFile'] = env.Builder\
            (
                emitter = collect_source_dependencies,
                action  = SCons.Script.Action(run_ctags, show_tags_generation_message),
                multi   = True,
                name    = 'TagsFile',
                suffix  = '4f9807f6-fcb3-47ff-ac8e-e3a0e2e2c478',
                # source_scanner = SCons.Script.CScan
            )
